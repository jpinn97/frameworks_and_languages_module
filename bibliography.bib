@misc{am_i_helpfulAnswerWhatBacklog2016,
  title = {Answer to "{{What}} Is "Backlog" in {{TCP}} Connections?"},
  shorttitle = {Answer to "{{What}} Is "Backlog" in {{TCP}} Connections?},
  author = {Am\_I\_Helpful},
  year = {2016},
  month = apr,
  journal = {Stack Overflow},
  url = {https://stackoverflow.com/a/36596724},
  urldate = {2023-12-29},
  file = {C:\Users\test\Zotero\storage\GEWAHEF9\what-is-backlog-in-tcp-connections.html}
}

@misc{AtomicPackageSync2023,
  title = {Atomic Package - Sync/Atomic - {{Go Packages}}},
  year = {2023},
  month = dec,
  url = {https://pkg.go.dev/sync/atomic},
  urldate = {2024-01-08}
}

@misc{BindFormdataRequest2022,
  title = {Bind Form-Data Request with Custom Struct},
  year = {2022},
  month = apr,
  journal = {Gin Web Framework},
  url = {https://gin-gonic.com/docs/examples/bind-form-data-request-with-custom-struct/},
  urldate = {2024-01-03},
  abstract = {The follow example using custom struct: type StructA struct \{ FieldA string `form:"field\_a"` \} type StructB struct \{ NestedStruct StructA FieldB string `form:"field\_b"` \} type StructC struct \{ NestedStructPointer *StructA FieldC string `form:"field\_c"` \} type StructD struct \{ NestedAnonyStruct struct \{ FieldX string `form:"field\_x"` \} FieldD string `form:"field\_d"` \} func GetDataB(c *gin.Context) \{ var b StructB c.Bind(\&b) c.JSON(200, gin.H\{ "a": b.NestedStruct, "b": b.FieldB, \}) \} func GetDataC(c *gin.Context) \{ var b StructC c.\vphantom\}},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\QQ4DCF3J\bind-form-data-request-with-custom-struct.html}
}

@article{Compareandswap2023,
  title = {Compare-and-Swap},
  year = {2023},
  month = dec,
  journal = {Wikipedia},
  url = {https://en.wikipedia.org/w/index.php?title=Compare-and-swap\&oldid=1189977377},
  urldate = {2024-01-08},
  abstract = {In computer science, compare-and-swap (CAS) is an atomic instruction used in multithreading to achieve synchronization. It compares the contents of a memory location with a given value and, only if they are the same, modifies the contents of that memory location to a new given value. This is done as a single atomic operation. The atomicity guarantees that the new value is calculated based on up-to-date information; if the value had been updated by another thread in the meantime, the write would fail. The result of the operation must indicate whether it performed the substitution; this can be done either with a simple boolean response (this variant is often called compare-and-set), or by returning the value read from the memory location (not the value written to it).},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1189977377},
  file = {C:\Users\test\Zotero\storage\XQJNAAHJ\Compare-and-swap.html}
}

@misc{CustomMiddleware2022,
  title = {Custom {{Middleware}}},
  year = {2022},
  month = apr,
  journal = {Gin Web Framework},
  url = {https://gin-gonic.com/docs/examples/custom-middleware/},
  urldate = {2024-01-03},
  abstract = {func Logger() gin.HandlerFunc \{ return func(c *gin.Context) \{ t := time.Now() // Set example variable 	c.Set("example", "12345") // before request  c.Next() // after request 	latency := time.Since(t) log.Print(latency) // access the status we are sending 	status := c.Writer.Status() log.Println(status) \} \} func main() \{ r := gin.New() r.Use(Logger()) r.GET("/test", func(c *gin.Context) \{ example := c.MustGet("example").(string) // it would print: "12345" 	log.Println(example) \}) // Listen and serve on 0.\vphantom\}},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\6WHVDE8D\custom-middleware.html}
}

@misc{Documentation2022,
  title = {Documentation},
  year = {2022},
  month = apr,
  journal = {Gin Web Framework},
  url = {https://gin-gonic.com/docs/},
  urldate = {2024-01-02},
  abstract = {Gin Web Framework},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\FZ8H5VBW\docs.html}
}

@misc{DocumentationGeoPandasUntagged2024,
  title = {Documentation {\textemdash} {{GeoPandas}} 0+untagged.50.Gfb079bf.Dirty Documentation},
  year = {2024},
  month = jan,
  url = {https://geopandas.org/en/stable/docs.html},
  urldate = {2024-01-08},
  file = {C:\Users\test\Zotero\storage\GZYVTSAU\docs.html}
}

@misc{DocumentationGoProgramming2023,
  title = {Documentation - {{The Go Programming Language}}},
  year = {2023},
  month = dec,
  url = {https://go.dev/doc/},
  urldate = {2024-01-02},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\FYTY37MD\doc.html}
}

@misc{EffectiveGoGo2009,
  title = {Effective {{Go}} - {{The Go Programming Language}}},
  year = {2009},
  url = {https://go.dev/doc/effective\_go},
  urldate = {2024-01-08},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\FABT626A\effective_go.html}
}

@misc{GoSrcNet2023,
  title = {Go/Src/Net/Http/Server.Go at Master {$\cdot$} Golang/Go},
  year = {2023},
  month = dec,
  journal = {GitHub},
  url = {https://github.com/golang/go/blob/8db131082d08e497fd8e9383d0ff7715e1bef478/src/net/http/server.go\#L3285},
  urldate = {2024-01-08},
  abstract = {The Go programming language. Contribute to golang/go development by creating an account on GitHub.},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\F4Q9G6U2\server.html}
}

@misc{ModelBindingValidation2022,
  title = {Model Binding and Validation},
  year = {2022},
  month = apr,
  journal = {Gin Web Framework},
  url = {https://gin-gonic.com/docs/examples/binding-and-validation/},
  urldate = {2024-01-03},
  abstract = {To bind a request body into a type, use model binding. We currently support binding of JSON, XML, YAML and standard form values (foo=bar\&boo=baz). Gin uses go-playground/validator/v10 for validation. Check the full docs on tags usage here. Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set json:"fieldname". Also, Gin provides two sets of methods for binding:},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\AKQ9MVFU\binding-and-validation.html}
}

@misc{NetIncreaseSOMAXCONN2019,
  title = {Net: Increase {{SOMAXCONN}} to 4096 - Kernel/Git/Torvalds/Linux.Git - {{Linux}} Kernel Source Tree},
  year = {2019},
  month = oct,
  url = {https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=19f92a030ca6d772ab44b22ee6a01378a8cb32d4},
  urldate = {2023-12-30},
  file = {C:\Users\test\Zotero\storage\U98MB4K9\commit.html}
}

@misc{PostGIS2023,
  title = {{{PostGIS}}},
  year = {2023},
  month = nov,
  journal = {PostGIS},
  url = {https://postgis.net/},
  urldate = {2024-01-08},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\3K52KMG3\postgis.net.html}
}

@misc{SocketLowlevelNetworking2023,
  title = {Socket {\textemdash} {{Low-level}} Networking Interface},
  year = {2023},
  journal = {Python documentation},
  url = {https://docs.python.org/3/library/socket.html},
  urldate = {2023-12-30},
  abstract = {Source code: Lib/socket.py This module provides access to the BSD socket interface. It is available on all modern Unix systems, Windows, MacOS, and probably additional platforms. Availability: not ...},
  file = {C:\Users\test\Zotero\storage\9LTQRBW8\socket.html}
}

@misc{StateSnapshotReact2024,
  title = {State as a {{Snapshot}} {\textendash} {{React}}},
  year = {2024},
  url = {https://react.dev/learn/state-as-a-snapshot},
  urldate = {2024-01-02},
  abstract = {The library for web and native user interfaces},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\8B4KVDY5\state-as-a-snapshot.html}
}

@misc{SyncPackageSync2023,
  title = {Sync Package - Sync - {{Go Packages}}},
  year = {2023},
  month = dec,
  url = {https://pkg.go.dev/sync},
  urldate = {2024-01-08}
}

@misc{UnicodeDecodeErrorPythonWiki2008,
  title = {{{UnicodeDecodeError}} - {{Python Wiki}}},
  year = {2008},
  month = nov,
  url = {https://wiki.python.org/moin/UnicodeDecodeError},
  urldate = {2024-01-01},
  file = {C:\Users\test\Zotero\storage\AAN563EI\UnicodeDecodeError.html}
}

@misc{UsingMiddleware2022,
  title = {Using Middleware},
  year = {2022},
  month = apr,
  journal = {Gin Web Framework},
  url = {https://gin-gonic.com/docs/examples/using-middleware/},
  urldate = {2024-01-03},
  abstract = {func main() \{ // Creates a router without any middleware by default 	r := gin.New() // Global middleware 	// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN\_MODE=release. 	// By default gin.DefaultWriter = os.Stdout 	r.Use(gin.Logger()) // Recovery middleware recovers from any panics and writes a 500 if there was one. 	r.Use(gin.Recovery()) // Per route middleware, you can add as many as you desire.\vphantom\}},
  langid = {english},
  file = {C:\Users\test\Zotero\storage\GK6BBUA6\using-middleware.html}
}

@article{UTF82023,
  title = {{{UTF-8}}},
  year = {2023},
  month = dec,
  journal = {Wikipedia},
  url = {https://en.wikipedia.org/w/index.php?title=UTF-8\&oldid=1191368954},
  urldate = {2024-01-01},
  abstract = {UTF-8 is a variable-length character encoding standard used for electronic communication. Defined by the Unicode Standard, the name is derived from Unicode Transformation Format {\textendash}  8-bit.UTF-8 is capable of encoding all 1,112,064 valid Unicode code points using one to four one-byte (8-bit) code units. Code points with lower numerical values, which tend to occur more frequently, are encoded using fewer bytes. It was designed for backward compatibility with ASCII: the first 128 characters of Unicode, which correspond one-to-one with ASCII, are encoded using a single byte with the same binary value as ASCII, so that valid ASCII text is valid UTF-8-encoded Unicode as well. UTF-8 was designed as a superior alternative to UTF-1, a proposed variable-length encoding with partial ASCII compatibility which lacked some features including self-synchronization and fully ASCII-compatible handling of characters such as slashes. Ken Thompson and Rob Pike produced the first implementation for the Plan 9 operating system in September 1992. This led to its adoption by X/Open as its specification for FSS-UTF, which would first be officially presented at USENIX in January 1993 and subsequently adopted by the Internet Engineering Task Force (IETF) in RFC 2277 (BCP 18) for future internet standards work, replacing Single Byte Character Sets such as Latin-1 in older RFCs. UTF-8 results in fewer internationalization issues than any alternative text encoding, and it has been implemented in all modern operating systems, including Microsoft Windows, and standards such as JSON, where, as is increasingly the case, it is the only allowed form of Unicode. UTF-8 is the dominant encoding for the World Wide Web (and internet technologies), accounting for 98.1\% of all web pages, 99.1\% of the top 10,000 pages, and up to 100\%  for many languages, as of 2023. Virtually all countries and languages have 95\% or more use of UTF-8 encodings on the web.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1191368954},
  file = {C:\Users\test\Zotero\storage\4FAIQV85\UTF-8.html}
}
